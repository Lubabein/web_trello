[{"C:\\Users\\lubab\\Desktop\\trello\\src\\index.js":"1","C:\\Users\\lubab\\Desktop\\trello\\src\\App.js":"2"},{"size":432,"mtime":1607706916000,"results":"3","hashOfConfig":"4"},{"size":4120,"mtime":1608229660347,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1wb2osm",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\lubab\\Desktop\\trello\\src\\index.js",[],["12","13"],"C:\\Users\\lubab\\Desktop\\trello\\src\\App.js",["14"],"import React, {useState} from 'react';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\nimport { v4 as uuid } from 'uuid';\nimport './App.css'\nconst NotStartedList = [\n  {\n    id: '1',\n    name: 'Купить книгу \"Умный сад в подробностях\"'\n  },\n  {\n    id: '2',\n    name: 'Начать захватывать мир'\n  },\n  {\n    id: '3',\n    name: 'Стать Хокаге'\n  }\n]\n\nconst InProgressList = [\n  {\n    id: '4',\n    name: 'Записать видео'\n  },\n  \n]\n\nconst CompletedList = [\n  {\n    id: '5',\n    name: 'Покормить кролика'\n  },\n  {\n    id: '6',\n    name: 'Купить скелет'\n  }\n]\n\nconst columnsAll =\n  {\n    [uuid()]: {\n      name: 'Not Started',\n      items:  NotStartedList  },\n    [uuid()]: {\n      name: 'In progress',\n      items: InProgressList\n    },\n    [uuid()]: {\n      name: 'Completed',\n      items: CompletedList\n    }\n  }\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if(!result.destination) return;\n  const {source, destination} = result;\n  if(source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destinationColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destinationItems = [...destinationColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destinationItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items:sourceItems\n      },\n      [destination.droppableId]: {\n        ...destinationColumn,\n        items: destinationItems\n      }\n    })\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items]\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    })\n  }\n\n}\n\nfunction App() {\n  \n  const [columns, setColumns] = useState(columnsAll);\n\n  return ( \n    <div className=\"App\" style={{display: 'flex', justifyContent: 'center', height: '100%'}} className = 'app'>\n      \n      <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)} >\n        {Object.entries(columns).map(([id, column]) => {\n          return(\n            \n            <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}} className = 'column'>\n    \n              <h2>{column.name}</h2>\n              <div style={{margin: 5}}>\n                <Droppable droppableId={id} key={id}>\n                  {(provided, snapshot) => {\n                    return(\n                      <div {...provided.droppableProps} ref={provided.innerRef} style={{background: snapshot.isDraggingOver ? 'MistyRose' : 'MistyRose', padding: 4, width: 250, minHeight:500 }}>\n                        {column.items.map((item, index) => {\n                          return(\n                            <Draggable key={item.id} draggableId={item.id} index={index}>\n                              {(provided, snapshot) => {\n                                return(\n                                  <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} style={{userSelect: 'none', padding: 16, margin: '0 0 8px 0', minHeight: '50px', backgroundColor: snapshot.isDragging ? 'RosyBrown' : 'RosyBrown', color: 'Seashell', ...provided.draggableProps.style}}>\n                                    {item.name}\n                                    \n                                  </div>\n                                )\n                              }}\n                            </Draggable>\n                          )\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    )\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          )\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":96,"column":94,"nodeType":"21","endLine":96,"endColumn":111},"no-native-reassign",["22"],"no-negated-in-lhs",["23"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]